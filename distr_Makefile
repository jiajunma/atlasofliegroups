# See the file INSTALL for detailed instructions

# the following line avoids trouble on some systems (GNU make does this anyway)
SHELL = /bin/sh
INSTALL = /usr/bin/install

# You may edit the INSTALLDIR and BINDIR variables

# INSTALLDIR is where the executables atlas, realex and the messages directory
# will be moved after successfull compilation

# BINDIR is where a symbolic link or shell script 'atlas' calling to the
# executable, and a symbolic link 'realex' will be placed; provided this
# directory is in the search path, you can then execute unsing atlas, realex

# In a single-user situation, you might want something like this:
#   INSTALLDIR := /home/fokko/myatlas
#   BINDIR     := /home/fokko/bin

# In a multi-user situation, you might want this (requires root):
#   INSTALLDIR := /usr/local/atlas
#   BINDIR     := /usr/local/bin

# The default: use the current directory, binaries in parent subdirectory bin
INSTALLDIR := $(shell pwd)
BINDIR := $(INSTALLDIR)/../bin

messagedir := $(INSTALLDIR)/messages/

# atlas_dirs contains subdirectories of 'atlas/sources' that need compilation
# realex_dirs are where the object files for realex are situated
atlas_dirs := utilities error structure gkmod io interface test
realex_dirs := utilities structure gkmod error io interpreter

# atlas_sources contains a list of the source files (i.e., the .cpp files)
atlas_sources := $(wildcard $(atlas_dirs:%=sources/%/*.cpp))

# there is one .o file for each .cpp file, in the same directory
atlas_objects := $(atlas_sources:%.cpp=%.o)

# headers are searched in the all directories containing source files
includedirs := $(addprefix -Isources/,$(atlas_dirs))
realex_includes := $(addprefix -Isources/,$(realex_dirs))

interpreter_objects := $(patsubst %.cpp,%.o, \
    $(wildcard sources/interpreter/*.cpp))
non_realex_objects := sources/io/interactive%.o \
    sources/interface/%.o sources/test/%.o \
    sources/io/poset.o sources/utilities/abelian.o sources/gkmod/kgp.o
realex_objects := $(interpreter_objects) sources/interpreter/parser.tab.o \
    $(filter-out $(non_realex_objects),$(atlas_objects))

objects := $(atlas_objects) $(interpreter_objects)

# compiler flags
# whenever changing the setting of these flags, do 'make clean' first

# the following are predefined flavors for the compiler flags:
# normal (nflags)
# optimizing (oflags)
# development with debugging (gflags)
# profiling (pflags)
nflags := -c $(includedirs) -Wall -DNDEBUG
oflags := -c $(includedirs) -Wall -O3 -DNDEBUG
gflags := -c $(includedirs) -Wall -ggdb
pflags := -c $(includedirs) -Wall -pg -O -DNREADLINE

# create flags specific for atlas and realex
atlas_flags :=
realex_flags := -Wno-parentheses

# the default setting is normal
cflags ?= $(nflags)

# to select another flavor, set optimize=true, debug=true or profile=true
# when calling make (as in "make optimize=true") or set the flavor as an
# environment variable (only the first flavor set in above list takes effect)
# alternatively, you can set cflags="explicit options" to override

ifeq ($(optimize),true)
      cflags := $(oflags)
else
ifeq ($(debug),true)
      cflags := $(gflags)
else
ifeq ($(profile),true)
      cflags := $(pflags)
endif
endif
endif

# suppress readline by setting readline=false
# and/or make more verbose by setting verbose=true

ifeq ($(readline),false)
    cflags += -DNREADLINE
    rl_libs =
else
    rl_libs ?= -lreadline

# to override this, either define and export a shell variable 'rl_libs'
# or set LDFLAGS when calling make. For instance for readline on the Mac do:
# $ make LDFLAGS="-lreadline.5 -lcurses"
endif

ifeq ($(verbose),true)
    atlas_flags += -DVERBOSE
endif

# the default compiler
CXX = g++

# give compiler=icc argument to make to use the intel compiler
ifdef compiler
    CXX = $(compiler)
endif

LDFLAGS := $(rl_libs)



# RULES follow below

# This target causes failed actions to clean up their (corrupted) target
.DELETE_ON_ERROR:

# we use no suffix rules
.SUFFIXES:

.PHONY: all

# The default target is 'all', which builds the executable 'atlas', and 'realex'
all: atlas realex

# the following dependency forces emptymode.cpp to be recompiled whenever any
# of the object files changes; this guarantees that the date in the version
# string it prints will be that of the last recompilation.
sources/interface/emptymode.o: $(atlas_sources)

# For profiling not only 'cflags' used in compiling is modified, but linking
# also is different
atlas: $(atlas_objects)
ifeq ($(profile),true)
	$(CXX) -pg -o atlas $(atlas_objects) $(LDFLAGS)
else
	$(CXX) -o atlas $(atlas_objects) $(LDFLAGS)
endif

realex: $(realex_objects)
	$(CXX) -o realex $(realex_includes) $(realex_objects) $(LDFLAGS)

# The following rules are static pattern rules: they are like implicit rules,
# but only apply to the files listed in their targets

$(filter-out sources/interface/io.o,$(atlas_objects)) : %.o : %.cpp
	$(CXX) $(cflags) $(atlas_flags) -o $*.o $*.cpp
sources/interface/io.o : sources/interface/io.cpp
	$(CXX) $(cflags) $(atlas_flags) -DMESSAGE_DIR_MACRO=\"$(messagedir)\" \
	  -o sources/interface/io.o sources/interface/io.cpp
$(interpreter_objects) : %.o : %.cpp
	$(CXX) $(cflags) $(realex_flags) -o $*.o $*.cpp

sources/interpreter/parser.tab.o: \
  sources/interpreter/parser.tab.c sources/interpreter/parsetree.h
	$(CC) -c -g -Wall $(CFLAGS) $(CPPFLAGS) -o $@ $<

install: atlas realex
ifneq ($(INSTALLDIR),$(shell pwd))
	@echo "Installing directories and files in $(INSTALLDIR)"
	$(INSTALL) -d $(INSTALLDIR)/messages $(INSTALLDIR)/rx-scripts
	$(INSTALL) -m 644 LICENSE COPYRIGHT README *.help $(INSTALLDIR)
	$(INSTALL) -p atlas realex $(INSTALLDIR)
	$(INSTALL) -m 644 messages/* $(INSTALLDIR)/messages/
	$(INSTALL) -m 644 rx-scripts/* $(INSTALLDIR)/rx-scripts/
endif
ifneq ($(BINDIR),$(INSTALLDIR))
	mkdir -p $(BINDIR)
	@if test -h $(BINDIR)/atlas; then rm -f $(BINDIR)/atlas; fi
	@if test -h $(BINDIR)/realex; then rm -f $(BINDIR)/realex; fi
ifeq ($(INSTALLDIR),$(shell pwd))
	ln -s $(INSTALLDIR)/atlas $(BINDIR)/atlas # make symbolic link
else
	echo "#!/bin/sh\n$(INSTALLDIR)/atlas $(INSTALLDIR)/messages/" \
	 >$(BINDIR)/atlas; chmod a+x $(BINDIR)/atlas
endif
	ln -s $(INSTALLDIR)/realex $(BINDIR)/realex
endif

.PHONY: mostlyclean clean
mostlyclean:
	rm -f $(objects)

clean: mostlyclean
	rm -f atlas realex

# distribution version of atlas uses a frozen set of dependencies

include dependencies
