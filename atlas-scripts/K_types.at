{see K_parameters.at}

<basic.at     { for *@(Param,rat) }
<herm.at { for hermitian_form_irreducible }
<K_highest_weights.at

set sort_by_height (ParamPol P) = [(Split,Param)]:
  sort_by_height(for c@p in P do (c,p) od)

set branch_std (Param p, int bound) = ParamPol:
  let sum=0*p in
  for c@q in ParamPol: p*(rat:0) do sum+:= c*branch(q,bound) od;
{sum}
finalize(sum)
{the finalize step shouldn't be necessary, but at least
temporarily it is due to a bug in branch}


set branch_std (ParamPol P,int bound) = ParamPol:
  let sum=0*P in for c@p in P*(rat:0) do sum +:= c*branch(p,bound) od;
{sum} finalize(sum)

set branch_irr (Param p, int bound) = ParamPol:
  branch_std(character_formula(p),bound)

set branch_irr (ParamPol P,int bound) = ParamPol:
  let sum=0*P in for c@p in P do
 sum +:= c*branch_irr(p,bound) od; sum

{print commands moved to print_K_types.at
set print_branch_irr (ParamPol P,KGBElt x,int bound) = void:
  for (mult,q) in sort_by_height(branch_irr(P,bound))
  do prints(split_as_int(mult), "*", highest_weights(q,x)[0]) od

set print_branch_irr (ParamPol P,int bound) = void: { default to x=KGB(G,0) }
  print_branch_irr(P,KGB(real_form(P),0),bound)

{ K-types of sum of irreducibles P, up to given bound, sorted by
  height, the output includes multiplicity, highest weight (on the identity
  component of K), dimension and height
}
set print_branch_irr_long (ParamPol P,KGBElt x,int bound) = void:
  for (mult,q) in sort_by_height(branch_irr(P,bound))
  do let hw=highest_weights(q,x)[0] in
    prints(split_as_int(mult), "*", hw
          ,  "  ", fundamental_weight_coordinates(hw), " ", dimensions(q)[0]
          , "    ", height(q))
  od



set print_branch_irr_long (ParamPol P,int bound) = void:
  { default to x=KGB(G,0) }
  print_branch_irr_long(P,KGB(real_form(P),0),bound)

{ these definitions promote Param->ParamPol without relying on coercion }
set print_branch_irr (Param p,KGBElt x, int bound) = void:
  print_branch_irr(ParamPol:p,x,bound)
set print_branch_irr (Param p, int bound) = void:
  print_branch_irr(ParamPol:p,bound)
set print_branch_irr_long (Param p,KGBElt x, int bound) = void:
  print_branch_irr_long(ParamPol:p,x,bound)
set print_branch_irr_long (Param p, int bound) = void:
  print_branch_irr_long(ParamPol:p,bound)

set print_branch_std (ParamPol P,KGBElt x,int bound) = void:
  for (mult,q) in sort_by_height(branch_std(P,bound))
  do let hw=highest_weights(q,x)[0] in
    prints(split_as_int(mult), "*", hw)
  od

set print_branch_std (ParamPol P,int bound) = void: { default to x=KGB(G,0) }
  print_branch_std(P,KGB(real_form(P),0),bound)

{ K-types of standard p, up to given bound, sorted by height, the
  output includes multiplicity, highest weight (on the identity component of
  K), dimension and height
}
set print_branch_std_long (ParamPol P,KGBElt x,int bound) = void:
( prints("rho_K=", rho_K(x))
; for (mult,q) in sort_by_height(branch_std(P,bound))
  do let hw=highest_weights(q,x)[0] in
    prints(split_as_int(mult), "*", hw, " ", dimensions(q)[0]
          ,  "    ", height(q))
  od
)

set print_branch_std_long (ParamPol P,int bound) = void:
  { default to x=KGB(G,0) }
  print_branch_std_long(P,KGB(real_form(P),0),bound)

{ these definitions promote Param->ParamPol without relying on coercion }
set print_branch_std (Param p,KGBElt x, int bound) = void:
  print_branch_std(ParamPol:p,x,bound)
set print_branch_std (Param p, int bound) = void:
  print_branch_std(ParamPol:p,bound)
set print_branch_std_long (Param p,KGBElt x, int bound) = void:
  print_branch_std_long(ParamPol:p,x,bound)
set print_branch_std_long (Param p, int bound) = void:
  print_branch_std_long(ParamPol:p,bound)
}

{ multiplicity of K-type p_K in standard module p }
set mult_std (Param p_K,Param p) = int:
  split_as_int(branch_std(p,height(p_K))[p_K])

{ multiplicity of K-type p_K in irreducible module p }
set mult_irr (Param p_K,Param p) = int:
  split_as_int(branch_irr(p,height(p_K))[p_K])

set mult_std(Param p_K, ParamPol P)=Split:let rv=Split:0 in for c@p in P do rv+:=c*mult_std(p_K,p) od ;rv
set mult_irr(Param p_K, ParamPol P)=Split:let rv=Split:0 in for c@p in P do rv+:=c*mult_irr(p_K,p) od ;rv

set K_signature_irr (Param p,int bound) = (ParamPol,ParamPol):
  let form=hermitian_form_irreducible(p) in
  ( branch_std(integer_part(form),bound) , branch_std(s_part(form),bound) )

{print commands moved to print_K_types.at
set print_K_signature_irr (Param p,KGBElt x,int bound) = void:
( let form=hermitian_form_irreducible(p)
  then P=integer_part(form),Q=s_part(form)
  in
  if =P then prints("Positive part is empty")
  else prints("Positive part:"); print_branch_std_long(P,x,bound)
  fi
; if =Q then prints("Negative part is empty")
  else prints("Negative part:");print_branch_std_long(Q,x,bound)
  fi
)

set print_K_signature_irr (Param p,int bound) = void:
  print_K_signature_irr(p,KGB(real_form(p),0),bound)
}
set signed_mult (Param p_K,Param p) = (int,int):
  let (P,Q)=K_signature_irr(p,height(p_K)) in
   ( split_as_int(branch_std(P,height(p_K))[p_K])
   , split_as_int(branch_std(Q,height(p_K))[p_K])
   )

{this should be modified to print all LKTs}
set print_K_types (ParamPol P) = void:
  let Q=sort_by_height(P) in
  for (c,p) in Q
  do let mu=highest_weight_one(LKT(p)) in
    prints(split_as_int(c), " ", fundamental_weight_coordinates (mu)
          , " ", dimension(mu), " ", length(mu))
  od

set print_K_types (ParamPol P, KGBElt x_K) = void:
  let Q=sort_by_height(P) in
  for (c,p) in Q
  do let mu=highest_weight_one(LKT(p),x_K) in
    prints(split_as_int(c), " ", fundamental_weight_coordinates (mu)
          , " ", dimension(mu), " ", length(mu))
  od
